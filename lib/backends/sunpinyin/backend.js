// Generated by CoffeeScript 1.7.1
(function() {
  var child_process, env, fs, pinyin, sunpinyin, tmp;

  fs = require('fs');

  child_process = require('child_process');

  pinyin = require('pinyin');

  tmp = require('tmp');

  tmp.setGracefulCleanup();

  sunpinyin = {};

  env = process.env;

  env.PYTHONIOENCODING = 'utf-8';

  sunpinyin.load_words = function(callback) {
    var result;
    result = {};
    return child_process.execFile('python2', ['./lib/backends/sunpinyin/python/importer/importer.py'], {
      maxBuffer: 200 * 1024 * 1024
    }, function(error, stdout, stderr) {
      var frequencies, line, lines, p, word;
      if (error) {
        throw error;
      }
      lines = stdout.split("\n");
      lines.pop();
      result.user = (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _ref = line.split(' '), word = _ref[0], frequencies = _ref[1], p = _ref[2];
          _results.push({
            word: word,
            frequencies: parseInt(frequencies),
            pinyin: p.split("'")
          });
        }
        return _results;
      })();
      return child_process.execFile('python2', ['./lib/backends/sunpinyin/python/importer/system_dict.py'], {
        maxBuffer: 200 * 1024 * 1024
      }, function(error, stdout, stderr) {
        if (error) {
          throw error;
        }
        lines = stdout.split("\n");
        lines.pop();
        result.system = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            line = lines[_i];
            _results.push({
              word: line
            });
          }
          return _results;
        })();
        return callback(result);
      });
    });
  };

  sunpinyin.save_words = function(words, callback) {
    if (words.length === 0) {
      return callback();
    }
    return tmp.tmpName(function(err, path) {
      var p, word;
      if (err) {
        return callback(err);
      }
      return fs.writeFile(path, ((function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          if (!((2 <= (_ref = word.word.length) && _ref <= 6))) {
            continue;
          }
          if (word.pinyin) {
            word.pinyin = (function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = word.pinyin;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                p = _ref1[_j];
                _results1.push(p.match(/[A-Za-z]+/)[0]);
              }
              return _results1;
            })();
          } else {
            word.pinyin = (function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = pinyin(word.word, {
                style: pinyin.STYLE_NORMAL
              });
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                p = _ref1[_j];
                _results1.push(p[0]);
              }
              return _results1;
            })();
          }
          _results.push("" + (word.pinyin.join("'")) + " " + word.word);
        }
        return _results;
      })()).join("\n"), function(err) {
        console.log(path);
        if (err) {
          return callback(err);
        }
        return child_process.execFile('python2', ['./lib/backends/sunpinyin/python/importer/import_qim_userdict.py', path], {
          maxBuffer: 200 * 1024 * 1024,
          env: env
        }, function(error, stdout, stderr) {
          if (error) {
            return callback(error);
          }
          console.log(stdout);
          return child_process.execFile('killall', ['fcitx'], function(error, stdout, stderr) {
            if (error) {
              return callback(error);
            }
            child_process.execFile('fcitx', ['-r']);
            return callback();
          });
        });
      });
    });
  };

  module.exports = sunpinyin;

}).call(this);

//# sourceMappingURL=backend.map
