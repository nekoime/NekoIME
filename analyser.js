// Generated by CoffeeScript 1.7.1
(function () {
    var OpenCC, article, cohesion, combination, combinations, count, entropy, file, fs, i, length, max_length, min_cohesion, min_entropy, min_frequencies, neibor, neibors, opencc, p, p_combined, part, parts, sentence, sentences, sysdict, total_length, word, words, _, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3,
        __indexOf = [].indexOf || function (item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    fs = require('fs');

    OpenCC = require('opencc');

    opencc = new OpenCC('t2s.json');

    _ = require('underscore');

    _.str = require('underscore.string');

    _.mixin(_.str.exports());

    max_length = 6;

    min_frequencies = 20;

    min_cohesion = 300;

    min_entropy = 100;

    combinations = function (word, allow_whole) {
        var first_part, i, rest_part, result, s, _i, _j, _len, _ref;
        if (allow_whole == null) {
            allow_whole = false;
        }
        result = [];
        for (i = _i = 1, _ref = (allow_whole ? word.length : word.length - 1); 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
            first_part = word.slice(0, i);
            if (i === word.length) {
                result.push([word]);
            } else {
                rest_part = combinations(word.slice(i), true);
                for (_j = 0, _len = rest_part.length; _j < _len; _j++) {
                    s = rest_part[_j];
                    s.unshift(first_part);
                    result.push(s);
                }
            }
        }
        return result;
    };

    if (process.argv[0]) {
        console.error("load " + (process.argv.length - 2) + " files");
        words = {};
        sentences = [];
        _ref = process.argv.slice(2);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            article = fs.readFileSync(file, {
                encoding: 'utf8'
            });
            article = opencc.convertSync(article);
            _ref1 = article.split(/[^\u4E00-\u9FA5]+/);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                sentence = _ref1[_j];
                if (!(sentence.length > 0)) {
                    continue;
                }
                sentences.push(sentence);
                for (length = _k = 1, _ref2 = Math.min(max_length, sentence.length); 1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; length = 1 <= _ref2 ? ++_k : --_k) {
                    for (i = _l = 0, _ref3 = sentence.length - length; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
                        word = sentence.substr(i, length);
                        if (words[word]) {
                            words[word]++;
                        } else {
                            words[word] = 1;
                        }
                    }
                }
            }
        }
        console.error("load " + sentences.length + " sentences");
        for (word in words) {
            if (words.length >= 2 && _.count(words, words[0]) === words.length) {
                words[word] = _.reduce(sentences, function (memo, sentence) {
                    return memo + _.count(sentence, word);
                }, 0);
            }
        }
        console.error("load " + (_.size(words)) + " words");
        total_length = _.reduce(sentences, function (memo, sentence) {
            return memo + sentence.length;
        }, 0);
        sysdict = _.lines(fs.readFileSync('sysdict.txt', {
            encoding: 'utf8'
        }));
        console.error("load " + sysdict.length + " system words");
        for (word in words) {
            count = words[word];
            if (!(count >= min_frequencies && word.length >= 2)) {
                continue;
            }
            if (__indexOf.call(sysdict, word) >= 0) {
                continue;
            }
            p = count / total_length;
            p_combined = Math.max.apply(this, (function () {
                var _len2, _m, _ref4, _results;
                _ref4 = combinations(word);
                _results = [];
                for (_m = 0, _len2 = _ref4.length; _m < _len2; _m++) {
                    combination = _ref4[_m];
                    _results.push(_.reduce(combination, function (memo, part) {
                        return memo * words[part] / total_length;
                    }, 1));
                }
                return _results;
            })());
            cohesion = p / p_combined;
            if (cohesion < min_cohesion) {
                continue;
            }
            neibors = {};
            for (_m = 0, _len2 = sentences.length; _m < _len2; _m++) {
                sentence = sentences[_m];
                parts = sentence.split(word);
                parts.pop();
                for (_n = 0, _len3 = parts.length; _n < _len3; _n++) {
                    part = parts[_n];
                    neibor = part[part.length - 1];
                    if (neibors[neibor]) {
                        neibors[neibor]++;
                    } else {
                        neibors[neibor] = 1;
                    }
                }
            }
            entropy = _.reduce(neibors, function (memo, c) {
                return memo + -Math.log(c / count) / c;
            }, 0);
            if (entropy < min_entropy) {
                continue;
            }
            neibors = {};
            for (_o = 0, _len4 = sentences.length; _o < _len4; _o++) {
                sentence = sentences[_o];
                parts = sentence.split(word);
                parts.shift();
                for (_p = 0, _len5 = parts.length; _p < _len5; _p++) {
                    part = parts[_p];
                    neibor = part[0];
                    if (neibors[neibor]) {
                        neibors[neibor]++;
                    } else {
                        neibors[neibor] = 1;
                    }
                }
            }
            entropy = _.reduce(neibors, function (memo, c) {
                return memo + -Math.log(c / count) / c;
            }, 0);
            if (entropy < min_entropy) {
                continue;
            }
            console.log(word, count);
        }
        console.error('done');
    } else {
        console.log('Usage: node analyser.js files');
    }

}).call(this);

//# sourceMappingURL=analyser.map
